/**
https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1228/

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

**/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode head1, ListNode head2) {
        
        
      int sum=0;
      ListNode head3=new ListNode(0);   //change to head1 and test once
      ListNode curr=head3;
        
        
       while(head1!=null || head2!=null || sum!=0) {
           if(head1!=null){
               sum=sum+head1.val;
               head1=head1.next;
           }
         
           if(head2!=null){
              sum=sum+head2.val;
              head2=head2.next;

           } 
           
           int digit=sum%10;
           curr.next=new ListNode(digit);
           sum=sum/10;
           curr=curr.next;
           
       }
        
      
        return head3.next;
        
    }
}
