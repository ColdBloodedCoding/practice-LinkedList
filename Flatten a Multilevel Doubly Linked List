/**
https://leetcode.com/explore/learn/card/linked-list/213/conclusion/1225

You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.

Given the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.

Return the head of the flattened list. The nodes in the list must have all of their child pointers set to null.

 

Example 1:


Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
Explanation: The multilevel linked list in the input is shown.

**/

/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
};
*/

class Solution {
    public Node flatten(Node head) {
        flattenTail(head);
    	return head;
    }
    
    
    private Node flattenTail(Node curr) {
        //Use recursion as it simplifies the problem
        
//All scenarios
//Case1: curr==null, return null
//Case2: curr.child=null and curr.next=null means last element in the level (return curr node)
//Case3: curr.child=null and curr.next!=null means go to next node
//Case4: curr.child!=null and curr.next==null, just flatten child node and done
//Case5: curr.child!=null and curr.next!=null, flatten child node and attach curr.next to its tail
        
        if(curr==null) return null;  //CASE 1
        
        if(curr.child==null){
            if(curr.next==null) return curr;   //CASE 2
            return flattenTail(curr.next);              //CASE 3
        } else{            
            Node child = curr.child;
            curr.child = null;
            Node next= curr.next;
            Node childTail = flattenTail(child);  // This is the main recursion  
           
            curr.next=child;
            child.prev=curr;
                
             if(next!=null) {                     //CASE 5
                childTail.next=next;
                next.prev=childTail; 
                return flattenTail(next);
               
            }  
            
            return childTail;   //CASE 4
        }  
    }
}



