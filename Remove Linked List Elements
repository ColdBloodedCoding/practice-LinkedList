/** https://leetcode.com/explore/learn/card/linked-list/219/classic-problems/1207/
Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

Example 1:


Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]


Sample Solution Using recursion:

class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if(head == null) return null;
        head.next = removeElements(head.next,val);
        return (head.val==val)?head.next:head;
    }
}

**/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        
        if (head==null) return null;
        ListNode prev =null;
        
        while(head!=null && head.val==val){
            head=head.next;
        }

        ListNode curr =head;
        while(curr!=null){
            if(curr.val==val){
               prev.next = curr.next;
            } else{
                prev=curr;
            }
            curr=curr.next;
          }
            return head;
        
        
    }
}
