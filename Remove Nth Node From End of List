/** Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

**./

/** SOLUTION 1 - NOT One Pass

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode curr=head;
        if(head==null) return null;
        int size=0;
        
        while(curr.next!=null) {
            curr=curr.next;
            size++;
        }

        int index = (size+1)-n;
        System.out.println("index :"+index);
    
     if (index == 0) {
      head = head.next;
       size--;        

            return head;
        }
            
        ListNode curr2=head;
     for(int i=0; i<index-1;i++) { 
         curr2=curr2.next;         
     }
        curr2.next=curr2.next.next;
        size--;
        
        return head;
         
        }
}

**/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null || head.next==null) return null;
      
        ListNode node =new ListNode(0);
        node.next=head;
        
        ListNode slow=node;
        ListNode fast=node;

        for(int i=0;i<=n;i++) {
           fast=fast.next; 
        }
        
        while(fast!=null){
            slow=slow.next;
            fast=fast.next;
        }
        slow.next=slow.next.next;
        return node.next;
}
}
